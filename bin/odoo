#!/usr/bin/fish

set root (workspace -p) || exit 1
set db (workspace -v) || exit 1

set -a args 'dry-run'
set -a args 'addons-path='
set -a args 'test-enable'
set -a args 'stop-after-init'
set -a args 'log-level='
set -a args 'max-cron-threads'
set -a args 'limit-time-cpu='
set -a args 'limit-time-real='
set -a args 'test-tags='
set -a args 'd/database='
set -a args 'i/init='
set -a args 'h/help'
set -a args 'p/http-port='
set -a args 'longpolling-port='

set -a args 'db_host='
set -a args 'w/db_password='
set -a args 'r/db_user='
set -a args 'db_port='

set custom_args community drop test-qunit= failslow
set -a args $custom_args

set -q PGPASSWORD && set default_db_password $PGPASSWORD
set -q PGHOST && set default_db_host $PGHOST
set -q PGUSER && set default_db_user $PGUSER
set -q PGPORT && set default_db_port $PGPORT

argparse --ignore-unknown $args -- $argv

if set -q _flag_test_qunit
  if set -q _flag_test_tags
    exit 1 # TODO
  end
  set default_test_tags /qunit.test_qunit
end

function default_addons_path --inherit-variable _flag_community
  set addons_paths odoo/addons design-themes
  set -q _flag_community || set -a addons_paths enterprise
  for d in $addons_paths
    test -d $root/$d && set -a path $d
  end
  test -d ~/odoo-tools/addons && set -a path ~/odoo-tools/addons
  string join ',' $path
end

function default_init --inherit-variable _flag_test_tags --inherit-variable _flag_test_qunit
  # TODO: scan all paths in addons_path
  if set -q _flag_test_qunit
    echo qunit
    return
  end

  set -q _flag_test_tags || return
  for tag in (string split ',' $_flag_test_tags)
    set -e module class method pattern
    string match -rq '(?:\\w+)?(?:\\/(?P<module>\\w+))?(?::(?P<class>\\w+))?(?:\\.(?P<method>\\w+))?' -- $tag
    if set -q module[1]
      set -a modules $module
    else if set -q class[1] || set -q method[1]
      if set -q class[1] && set -q method[1]
        set rg_args --multiline --multiline-dotall "$class.*$method"
      else
        set rg_args $class $method
      end
      set files (rg -g '**/tests/**/*.py' --no-config -l $rg_args $root)
      for f in $files
        string match -rq '/(?P<module>\w+)/tests/' $f
        set -q module[1] && set -a modules $module
      end
    end
  end
  string join ',' $modules
end

set default_limit_time_cpu 99999
set default_limit_time_real 99999

if set -q _flag_test_tags || set -q _flag_test_qunit
  set default_test_enable
  set default_log_level test
  set default_max_cron_thread 0
  set default_stop_after_init
  set default_http_port 9000
end

function get_actual_value --no-scope-shadowing
  for i in _flag_$argv[1] default_$argv[1]
    if set -q $i
      echo $$i
      return
    end
  end
  return 1
end

if set -q default_http_port || set -q _flag_http_port
  set port (get_actual_value http_port)
  set default_longpolling_port (math "$port + 1")
end

if set -q _flag_test_enable || set -q default_test_enable
  set default_database $db-test
else
  set default_database $db
end

if set -q _flag_drop
  set db (get_actual_value database) && dropdb $db &> /dev/null
end

function to_flag
  switch $argv
    case db_port db_host db_user db_password # TODO
      echo --$argv
    case '*'
      echo --(string replace -a '_' '-' $argv)
  end
end

# Use defaults if none are provided
for d in (set -n | string match 'default_*')
  set name (string replace 'default_' '' $d)
  if not set -q "_flag_$name"
    set flag (to_flag $name)
    test -n "$$d" && set flag $flag=$$d
    set -a odoo_args $flag
  end
end
for f in (functions -n | string match 'default_*')
  set name (string replace 'default_' '' $f)
  set -q "_flag_$name" || set -a odoo_args (to_flag $name)=($f)
end

# Add every flag and it's value if it has one
set custom_args_names (string replace -r '=.*' '' $custom_args | string replace -a '-' _)
for f in (set -n | string match -r '_flag_\w\w+')
  set name (string replace '_flag_' '' $f)
  contains $name $custom_args_names && continue
  set flag_name (to_flag $name)
  set -a odoo_args (test $flag_name = $$f && echo $flag_name || echo $flag_name=$$f)
end

# A command needs to be the first argument
for c in cloc deploy populate scaffold shell start tsconfig
  if set -l index (contains --i -- $c $argv)
    set -e argv[$index]
    set command $c
    set -p odoo_args $command
    break
  end
end

# Add unknown flags
set -a odoo_args $argv

cd $root
if isatty stdout && not set -q _flag_help
  set_color -uo cyan
  # echo -sn (set_color -o) odoo (set_color normal) ' '
  echo odoo $odoo_args
  set_color normal
end

set cmd venv/bin/python odoo/odoo-bin $odoo_args
set -a cmd '; set odoo_status $pipestatus[1]'

if set -q _flag_test_qunit
  set -p cmd QUNIT_FILTER="'$_flag_test_qunit'"
end

if set -q _flag_failslow
  set -p cmd QUNIT_FAILFAST=0
end

eval $cmd

# Send a notification once the tests are done
if contains -- --test-enable $odoo_args
  if test $odoo_status -eq 0
    notify-send -h string:frcolor:#00FF00 'Tests passed'
  else
    notify-send -h string:frcolor:#FF0000 'Tests failed'
  end
end
exit $odoo_status

