#!/usr/bin/fish

set workspaces_root ~/src
mkdir -p $workspaces_root

function _fail
  _warn $argv
  exit 1
end

function _warn
  set_color red
  echo $argv 1>&2
  set_color normal
end

function _get_major_version
  rg -o '^version_info = \((?:[\'"]saas~)?(\d+)[\'"]?,' -r '$1' $argv[1]
end

function init
  test -d $workspaces_root/master && _fail 'master already exists'
  mkdir $workspaces_root/master
  cd $workspaces_root/master
  _install_system_dependencies
  for i in odoo enterprise design-themes
    git clone git@github.com:odoo/$i.git
    git -C $i checkout master
  end
  git clone git@github.com:odoo-ide/odoo-stubs.git
  _create_venv --root=$workspaces_root/master
end

function add
  argparse 'n/name=' -- $argv
  set -q argv[1] || _fail 'missing version'
  if set -q _flag_name
    set workspace_root $workspaces_root/$_flag_name
  else
    set workspace_root $workspaces_root/$argv[1] 
  end
  test -d $workspace_root && _fail 'worktree already exists'
  mkdir $workspace_root
  cd $workspace_root
  for i in odoo enterprise design-themes odoo-stubs
    if test $i = odoo-stubs
      set odoo_major_version (_get_major_version odoo/odoo/release.py)
      set branch $odoo_major_version.0
      if test $branch = 16.0
        set branch 15.0
      end
    else
      set branch $argv[1]
    end
    set dest_repo $workspace_root/$i
    git -C $workspaces_root/master/$i worktree add -f $dest_repo origin/$branch || _warn "Failed to add worktree for $i"
  end
  _create_venv --root=$workspace_root
end

function rebuild
  set ws (workspace -p) || _fail 'Not inside a workspace'
  rm -r $ws/venv
  _create_venv --root=$ws
end

function prune
  for i in odoo enterprise design-themes odoo-stubs
    test -d $workspaces_root/master/$i && git -C $workspaces_root/master/$i worktree prune
  end
end

function _install_system_dependencies
  if not yay -Qq wkhtmltox &> /dev/null
    wget -O /tmp/wkhtmltox.pkg.tar.gz https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-3/wkhtmltox-0.12.6-3.archlinux-x86_64.pkg.tar.xz
    yay -U /tmp/wkhtmltox.pkg.tar.gz
    rm /tmp/wkhtmltox.pkg.tar.gz
  end
  for dep in libxcrypt-compat postgresql-libs libldap
    yay -Qq $dep &> /dev/null || yay -S $dep
  end
  test -f /usr/lib64/libldap_r.so || echo 'INPUT ( libldap.so )' | sudo tee /usr/lib64/libldap_r.so > /dev/null
end

function _source_asdf
  if not type -q asdf
    if not test -f /opt/asdf-vm/asdf.fish
      yay -S asdf-vm
    end
    test -f /opt/asdf-vm/asdf.fish && source /opt/asdf-vm/asdf.fish || _fail "Couldn't load asdf"
  end
end

function _create_venv
  _source_asdf
  argparse 'root=' -- $argv
  test -d $_flag_root || _fail "Root doesn't exist"
  pushd $_flag_root
  set odoo_major_version (_get_major_version odoo/odoo/release.py)
  if test "$odoo_major_version" -le 13
    set python_version '3.8.13'
  else if test "$odoo_major_version" -lt 16
    set python_version '3.9.13'
  else
    set python_version '3.10.7'
  end
  asdf plugin list | string match -q python || asdf plugin add python || _fail 'Failed to install python plugin'
  asdf list python | string match -q "*$python_version" || asdf install python $python_version || _fail "Failed to install python $python_version"
  asdf local python $python_version
  virtualenv venv --python=(asdf which python)
  source venv/bin/activate.fish
  pip install --upgrade pip
  set blacklist vatnumber
  set dependencies (cat odoo/requirements.txt | string match -vr (string join '|' -- $blacklist))
  set -a dependencies pydevd-pycharm==(fd -td '^\d+\.\d+\.\d+$' ~/.local/share/JetBrains/Toolbox/apps/PyCharm-P/ch-0 -d1 -x echo '{/}' | sort -r | head -1)
  set -a dependencies websocket-client ptpython mock pydevd-odoo
  pip install -r (string join \n $dependencies | psub -s .txt)
  popd
end

string match -qv '_*' "$argv[1]" && functions -q "$argv[1]" && $argv
